name: Power_Pipeline

on:
  push:

jobs:
  Snyk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor

  SonarQube:
    runs-on: ubuntu-latest
    needs: ["Snyk"]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar

  Build:
    runs-on: ubuntu-latest
    needs: ["SonarQube"]
    outputs:
      artifactPath: ${{ runner.workspace }}/Power_Pipeline/target/dependency/*.jar
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build with Maven
        run: |
          mvn clean package
          pwd
          ls

      - name: Archive artifact
        uses: actions/upload-artifact@v2
        with:
          name: my-artifact
          path: ${{ runner.workspace }}/Power_Pipeline/target/dependency/*.jar

  JFrog:
    runs-on: ubuntu-latest
    needs: ["Build"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Jfrog push v2
        uses: jfrog/setup-jfrog-cli@v2
        env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_USER: ${{ secrets.JFROG_USERNAME }}
          JF_PASSWORD: ${{ secrets.JFROG_PASSWORD }}
               
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: my-artifact
          path: ${{ runner.workspace }}/downloaded-artifact
        
      - name: Jfrog Artifactory Upload
        run: |
         jf rt u "${{ runner.workspace }}/downloaded-artifact/*.jar" "jfrog/onlinebookstore/0.0.1-SNAPSHOT/webapp-${{ github.run_number }}"

       - name: Docker build and push
         run: |
          # Run commands to build and push Docker images
          docker build -t tic-tac-toe .
          docker tag tic-tac-toe yedudevops/tic-tac-toe:latest
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker push yedudevops/tic-tac-toe:latest
        env:
          DOCKER_CLI_ACI: 1         
